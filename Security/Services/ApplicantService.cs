using AutoMapper;
using Jobit.API.Jobit.Domain.Models;
using Jobit.API.Jobit.Domain.Repositories;
using Jobit.API.Security.Domain.Models;
using Jobit.API.Security.Domain.Repositories;
using Jobit.API.Security.Domain.Services;
using Jobit.API.Security.Domain.Services.Communication;
using Jobit.API.Security.Domain.Services.Communication.Responses;
using Jobit.API.Shared.Domain.Repositories;
using Microsoft.AspNetCore.Mvc;

namespace Jobit.API.Security.Services;

public class ApplicantService : IApplicantService
{
    private readonly IApplicantProfileRepository _applicantProfileRepository;
    private readonly IApplicantRepository _applicantRepository;
    private readonly IUserRepository _userRepository;
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;

    public ApplicantService(IApplicantProfileRepository applicantProfileRepository,
        IApplicantRepository applicantRepository, IUnitOfWork unitOfWork, IMapper mapper,
        IUserRepository userRepository)
    {
        _applicantProfileRepository = applicantProfileRepository;
        _applicantRepository = applicantRepository;
        _unitOfWork = unitOfWork;
        _userRepository = userRepository;
        _mapper = mapper;
    }

    public async Task<Object> GetApplicantPublicData(long applicantId)
    {
        var user = await _applicantRepository.FindApplicantByApplicantIdAsync(applicantId);
        return new { username = user.Username, firstname = user.Firstname, lastname = user.Lastname };
    }

    public async Task GenerateApplicantProfileAsync(long applicantId)
    {
        try
        {
            var userPublicData = await GetApplicantPublicData(applicantId);

            var username = userPublicData.GetType().GetProperty("username")!.GetValue(userPublicData, null)!.ToString();
            var firstname =
                userPublicData.GetType().GetProperty("firstname")!.GetValue(userPublicData, null)!.ToString();
            var lastname = userPublicData.GetType().GetProperty("lastname")!.GetValue(userPublicData, null)!.ToString();

            Console.WriteLine($"{username} - {firstname} - {lastname}");
            ApplicantProfile starterApplicantProfile = new ApplicantProfile(applicantId, username, firstname, lastname);

            await _applicantProfileRepository.AddApplicantProfileAsync(starterApplicantProfile);
            await _unitOfWork.CompleteAsync();
        }
        catch (Exception exception)
        {
            throw new ApplicationException();
        }
    }

    public async Task<IEnumerable<Applicant>> ListAllApplicantsAsync()
    {
        return await _applicantRepository.ListAllApplicantsAsync();
    }

    public async Task<ApplicantResponse> FindApplicantByApplicantIdAsync(long applicantId)
    {
        var existingApplicant = await _applicantRepository.FindApplicantByApplicantIdAsync(applicantId);
        if (existingApplicant == null)
            return new ApplicantResponse("Applicant not found");
        return new ApplicantResponse(existingApplicant);
    }

    public async Task<ApplicantResponse> RegisterApplicantAsync(RegisterApplicantRequest newApplicant)
    {
        var applicant = _mapper.Map<RegisterApplicantRequest, Applicant>(newApplicant);
        try
        {
            //Register new user
            User newUserInsertion = new User(applicant);
            await _userRepository.RegisterUserAsync(newUserInsertion);
            await _unitOfWork.CompleteAsync();

            //Set Applicant Foreign Keys from User.
            applicant.UserId = newUserInsertion.UserId;

            //Register new applicant
            await _applicantRepository.RegisterApplicantAsync(applicant); //applicant id will be modified because it's autogenerated in add.
            await _unitOfWork.CompleteAsync();

            //Creating new applicant profile
            await GenerateApplicantProfileAsync(applicant.ApplicantId);
            await _unitOfWork.CompleteAsync();
            
            return new ApplicantResponse(applicant);
        }
        catch (Exception exception)
        {
            return new ApplicantResponse($"An error has occurred here: {exception.Message}");
        }
    }

    public async Task<ApplicantResponse> UpdateApplicantAsync(long applicantId, Applicant updatedApplicant)
    {
        var existingApplicant = await _applicantRepository.FindApplicantByApplicantIdAsync(applicantId);
        if (existingApplicant == null)
            return new ApplicantResponse("Applicant does not exist");

        existingApplicant.SetApplicant(updatedApplicant);

        try
        {
            _applicantRepository.UpdateApplicantAsync(updatedApplicant);
            await _unitOfWork.CompleteAsync();
            return new ApplicantResponse(existingApplicant);
        }
        catch (Exception exception)
        {
            return new ApplicantResponse($"An error has occurred: {exception.Message}");
        }
    }

    public async Task<ApplicantResponse> DeleteApplicantAsync(long applicantId)
    {
        var existingApplicant = await _applicantRepository.FindApplicantByApplicantIdAsync(applicantId);
        try
        {
            _applicantRepository.DeleteApplicantAsync(existingApplicant);
            await _unitOfWork.CompleteAsync();
            return new ApplicantResponse(existingApplicant);
        }
        catch (Exception exception)
        {
            return new ApplicantResponse($"An error has occurred: {exception.Message}");
        }
    }
}